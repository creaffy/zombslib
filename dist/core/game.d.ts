import { EventEmitter } from "node:events";
import { Codec, DumpedData } from "./codec";
import { ApiServer } from "../types/api";
import { AccountSessionRpc, ACToClientRpc, AirDropRpc, CheatingDetectedRpc, CompressedDataRpc, DamageRpc, DataFinishedRpc, DataRpc, DayNightRpc, DeadRpc, EndOfGameStatsRpc, EnterWorldResponse, EntityType, EntityUpdate, GameStatusRpc, GameTimerRpc, GunGameWeaponRpc, InputRpc, InventoryUpdateEquipRpc, InventoryUpdateRpc, KillFeedRpc, LeaderboardRpc, LoadoutUserRpc, LoginResponseRpc, LootCategoryOverrideRpc, MetricsRpc, PartyLeftRpc, PartyUpdateRpc, PlaceBuildingFailedRpc, PlanePathRpc, PlayerCountRpc, ReceiveChatMessageRpc, ResetGameRpc, SetClientLoadoutRpc, SetSkinRpc, ShutdownRpc, UpdateMarkerRpc, Vector2, ACInitRpc, ObserverRpc } from "../types/network";
import { SchemaAmmo, SchemaBuilding, SchemaEmote, SchemaGas, SchemaGeneral, SchemaGunGameGun, SchemaHealingItem, SchemaLoadout, SchemaMap, SchemaModifier, SchemaNpc, SchemaPlayer, SchemaPlayerBuilding, SchemaProjectile, SchemaProp, SchemaTier, SchemaVehicle, SchemaWeapon, SchemaZombie } from "../types/schema";
import { Agent } from "node:http";
interface GameEvents {
    RawData: (data: Uint8Array) => void;
    Rpc: (name: string, rpc: object) => void;
    RpcRawData: (namehash: number, decryptedData: Uint8Array) => void;
    EnterWorldResponse: (enterWorldResponse: EnterWorldResponse) => void;
    EntityUpdate: (entityUpdate: EntityUpdate) => void;
    ObserverRpc: (rpc: ObserverRpc) => void;
    ACInitRpc: (rpc: ACInitRpc) => void;
    ACToClientRpc: (rpc: ACToClientRpc) => void;
    DamageRpc: (rpc: DamageRpc) => void;
    DeadRpc: (rpc: DeadRpc) => void;
    InventoryUpdateEquipRpc: (rpc: InventoryUpdateEquipRpc) => void;
    DayNightRpc: (rpc: DayNightRpc) => void;
    ResetGameRpc: (rpc: ResetGameRpc) => void;
    InventoryUpdateRpc: (rpc: InventoryUpdateRpc) => void;
    AccountSessionRpc: (rpc: AccountSessionRpc) => void;
    ShutdownRpc: (rpc: ShutdownRpc) => void;
    GameTimerRpc: (rpc: GameTimerRpc) => void;
    PartyLeftRpc: (rpc: PartyLeftRpc) => void;
    AirDropRpc: (rpc: AirDropRpc) => void;
    CheatingDetectedRpc: (rpc: CheatingDetectedRpc) => void;
    LootCategoryOverrideRpc: (rpc: LootCategoryOverrideRpc) => void;
    LeaderboardRpc: (rpc: LeaderboardRpc) => void;
    PlanePathRpc: (rpc: PlanePathRpc) => void;
    PartyUpdateRpc: (rpc: PartyUpdateRpc) => void;
    PlayerCountRpc: (rpc: PlayerCountRpc) => void;
    DataFinishedRpc: (rpc: DataFinishedRpc) => void;
    GunGameWeaponRpc: (rpc: GunGameWeaponRpc) => void;
    UpdateMarkerRpc: (rpc: UpdateMarkerRpc) => void;
    KillFeedRpc: (rpc: KillFeedRpc) => void;
    LoginResponseRpc: (rpc: LoginResponseRpc) => void;
    LoadoutUserRpc: (rpc: LoadoutUserRpc) => void;
    ReceiveChatMessageRpc: (rpc: ReceiveChatMessageRpc) => void;
    CompressedDataRpc: (rpc: CompressedDataRpc) => void;
    EndOfGameStatsRpc: (rpc: EndOfGameStatsRpc) => void;
    GameStatusRpc: (rpc: GameStatusRpc) => void;
    DataRpc: (rpc: DataRpc) => void;
    PlaceBuildingFailedRpc: (rpc: PlaceBuildingFailedRpc) => void;
    SetClientLoadoutRpc: (rpc: SetClientLoadoutRpc) => void;
    SchemaAmmos: (data: SchemaAmmo[]) => void;
    SchemaBuildings: (data: SchemaBuilding[]) => void;
    SchemaEmotes: (data: SchemaEmote[]) => void;
    SchemaGas: (data: SchemaGas[]) => void;
    SchemaGeneral: (data: SchemaGeneral) => void;
    SchemaGunGameGuns: (data: SchemaGunGameGun[]) => void;
    SchemaHealingItems: (data: SchemaHealingItem[]) => void;
    SchemaLoadouts: (data: SchemaLoadout[]) => void;
    SchemaMaps: (data: SchemaMap[]) => void;
    SchemaModifiers: (data: SchemaModifier[]) => void;
    SchemaNpcs: (data: SchemaNpc[]) => void;
    SchemaPlane: (data: object) => void;
    SchemaPlayer: (data: SchemaPlayer[]) => void;
    SchemaPlayerBuildings: (data: SchemaPlayerBuilding[]) => void;
    SchemaProjectiles: (data: SchemaProjectile[]) => void;
    SchemaProps: (data: SchemaProp[]) => void;
    SchemaTiers: (data: SchemaTier[]) => void;
    SchemaVehicles: (data: SchemaVehicle[]) => void;
    SchemaWeapons: (data: SchemaWeapon[]) => void;
    SchemaZombies: (data: SchemaZombie[]) => void;
}
export declare function rpcMappingFromFile(path: string): DumpedData;
export interface GameOptions {
    displayName?: string;
    proxy?: Agent;
    decodeEntityUpdates?: boolean;
    decodeRpcs?: boolean;
    parseSchemas?: boolean;
    rpcMapping?: DumpedData;
}
export declare class Game extends EventEmitter {
    private socket;
    codec: Codec;
    on<K extends keyof GameEvents>(event: K, listener: GameEvents[K]): this;
    on(event: string, listener: (...args: any[]) => void): this;
    constructor(server: ApiServer, options?: GameOptions);
    send(data: Uint8Array | undefined): void;
    shutdown(): void;
    getEnterWorldResponse(): EnterWorldResponse;
    getEntityList(): Map<number, import("../types/network").NetworkEntity>;
    getEntitiesByType(type: EntityType): Map<number, import("../types/network").NetworkEntity>;
    getMyUid(): number;
    getEntityByUid(uid: number): import("../types/network").NetworkEntity | undefined;
    getPlayerByName(name: string): import("../types/network").NetworkEntity | undefined;
    toServerPos(worldPos: Vector2): Vector2;
    toWorldPos(serverPos: Vector2): Vector2;
    acToServerRpc(data: number[]): void;
    startUdpStreamRpc(): void;
    setPlatformRpc(platform: "android" | "web" | "windows" | "ios"): void;
    interactDoorRpc(buildingUid: number, doorIndex: number, close: number): void;
    enterVehicleRpc(uid: number): void;
    autoFillRpc(): void;
    startCircleRpc(): void;
    sendChatMessageRpc(channel: "Local" | "Party", message: string): void;
    joinTeamRpc(key: string, players: number): void;
    placeBuildingRpc(dataIndex: number, x: number, y: number): void;
    swapItemRpc(inventorySlot1: number, inventorySlot2: number): void;
    setBuildingModeRpc(isBuilding: number): void;
    startReviveRpc(uid: number): void;
    loginRpc(token: string): void;
    respawnRpc(respawnWithHalf: number): void;
    consumeRpc(): void;
    dropAmmoRpc(ammoIndex: number): void;
    setEmoteRpc(emote2: number): void;
    startLobbyRpc(): void;
    setMarkerRpc(x: number, y: number, valid: number): void;
    pickupItemRpc(itemUid: number, inventorySlot: number): void;
    setSkinRpc(rpcs: SetSkinRpc[]): void;
    equipItemRpc(inventorySlot: number): void;
    setPartyColorRpc(party: number): void;
    sprayRpc(sprayIndex2: number, x: number, y: number): void;
    setLoadoutRpc(index: number): void;
    dropItemRpc(inventorySlot: number, x: number, y: number): void;
    respawnPendingRpc(): void;
    reloadServerRpc(): void;
    exitVehicleRpc(): void;
    inputRpc(rpc: InputRpc): void;
    reloadRpc(): void;
    spectateRpc(uid: number): void;
    startTcpStreamRpc(attemptedUdp: number, received500: number): void;
    cancelActionRpc(): void;
    lootChestRpc(chestUid: number): void;
    metricsRpc(rpc: MetricsRpc): void;
    parachuteRpc(): void;
}
export {};
