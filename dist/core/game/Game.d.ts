import { EventEmitter } from "node:events";
import { Agent } from "node:http";
import { Codec, DumpedData } from "../codec/Codec";
import { ApiServer } from "../../types/Api";
import { GameEvents } from "./GameEvents";
import { EntityType, InputRpc, MetricsRpc, SetSkinRpc, Vector2 } from "../../types/Packets";
export declare function rpcMappingFromFile(path: string): DumpedData;
export interface GameOptions {
    displayName?: string;
    proxy?: Agent;
    schemas?: boolean;
    rpcMapping?: DumpedData;
    udp?: boolean;
    autoAckTick?: boolean;
}
export declare class Game extends EventEmitter {
    private tcpSocket;
    private udpSocket?;
    private options;
    private server;
    codec: Codec;
    on<K extends keyof GameEvents>(event: K, listener: GameEvents[K]): this;
    on(event: string, listener: (...args: any[]) => void): this;
    constructor(server: ApiServer, options?: GameOptions);
    private handlePacket;
    send(data?: Uint8Array, udp?: boolean): void;
    shutdown(): void;
    getEnterWorldResponse(): import("../../types/Packets").EnterWorldResponse;
    getEntityList(): Map<number, import("../../types/Packets").NetworkEntity>;
    getEntitiesByType(type: EntityType): Map<number, import("../../types/Packets").NetworkEntity>;
    getMyUid(): number;
    getEntityByUid(uid: number): import("../../types/Packets").NetworkEntity | undefined;
    getPlayerByName(name: string): import("../../types/Packets").NetworkEntity | undefined;
    toServerPos(worldPos: Vector2): Vector2;
    toWorldPos(serverPos: Vector2): Vector2;
    acToServerRpc(data: number[]): void;
    startUdpStreamRpc(): void;
    setPlatformRpc(platform: "android" | "web" | "windows" | "ios"): void;
    interactDoorRpc(buildingUid: number, doorIndex: number, close: number): void;
    enterVehicleRpc(uid: number): void;
    autoFillRpc(): void;
    startCircleRpc(): void;
    sendChatMessageRpc(channel: "Local" | "Party", message: string): void;
    joinTeamRpc(key: string, players: number): void;
    placeBuildingRpc(dataIndex: number, x: number, y: number): void;
    swapItemRpc(inventorySlot1: number, inventorySlot2: number): void;
    setBuildingModeRpc(isBuilding: number): void;
    startReviveRpc(uid: number): void;
    loginRpc(token: string): void;
    respawnRpc(respawnWithHalf: number): void;
    consumeRpc(): void;
    dropAmmoRpc(ammoIndex: number): void;
    setEmoteRpc(emote2: number): void;
    startLobbyRpc(): void;
    setMarkerRpc(x: number, y: number, valid: number): void;
    pickupItemRpc(itemUid: number, inventorySlot: number): void;
    setSkinRpc(rpcs: SetSkinRpc[]): void;
    equipItemRpc(inventorySlot: number): void;
    setPartyColorRpc(party: number): void;
    sprayRpc(sprayIndex2: number, x: number, y: number): void;
    setLoadoutRpc(index: number): void;
    dropItemRpc(inventorySlot: number, x: number, y: number): void;
    respawnPendingRpc(): void;
    reloadServerRpc(): void;
    exitVehicleRpc(): void;
    inputRpc(rpc: InputRpc): void;
    reloadRpc(): void;
    spectateRpc(uid: number): void;
    startTcpStreamRpc(attemptedUdp: number, received500: number): void;
    cancelActionRpc(): void;
    lootChestRpc(chestUid: number): void;
    metricsRpc(rpc: MetricsRpc): void;
    parachuteRpc(): void;
}
